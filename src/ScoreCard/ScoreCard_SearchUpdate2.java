/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ScoreCard;

import DatabaseConnectivity.DatabaseConnectivity;
import Psl_Classes.TeamMatch;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import classes.ScoreCard;
import javax.swing.JComboBox;

/**
 *
 * @author MUHAMMED BILAL
 */
public class ScoreCard_SearchUpdate2 extends javax.swing.JFrame {

    /**
     * Creates new form ScoreCard_SearchUpdate
     */
    private Connection Connection;
    TeamMatch T;
    String getTeam;
    String getPlayer;
    
    private DatabaseConnectivity objConnectivity;
    public ScoreCard_SearchUpdate2(TeamMatch T1) {
        initComponents();
        objConnectivity=new DatabaseConnectivity();
        Connection=objConnectivity.getConnection();
        T=T1;
        if(T!=null)
        {
            String TeamOne=checkTeam(T.getTeamAId());
            String TeamTwo=checkTeam(T.getTeamBId());
            LoadTeamCombox(TeamOne,TeamTwo);
            season.setText(getSeason(T.getSeasonid()));
            matchvs.setText(TeamOne+" VS "+TeamTwo);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        search = new javax.swing.JButton();
        back = new javax.swing.JButton();
        Team = new javax.swing.JComboBox<>();
        player = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        season = new javax.swing.JLabel();
        matchvs = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Team");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(300, 280, 80, 40);

        search.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        search.setForeground(new java.awt.Color(255, 255, 255));
        search.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PSL Icon/google search.png"))); // NOI18N
        search.setText("Next");
        search.setContentAreaFilled(false);
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });
        jPanel1.add(search);
        search.setBounds(480, 440, 140, 50);

        back.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        back.setForeground(new java.awt.Color(255, 255, 255));
        back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PSL Icon/icons8-back-arrow-48.png"))); // NOI18N
        back.setText("Back");
        back.setContentAreaFilled(false);
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        jPanel1.add(back);
        back.setBounds(50, 50, 121, 50);

        Team.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TeamActionPerformed(evt);
            }
        });
        jPanel1.add(Team);
        Team.setBounds(410, 280, 260, 40);

        player.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerActionPerformed(evt);
            }
        });
        jPanel1.add(player);
        player.setBounds(410, 360, 260, 40);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Player");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(310, 370, 80, 22);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Season");
        jLabel5.setToolTipText("");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(940, 100, 70, 40);

        season.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        season.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(season);
        season.setBounds(1030, 100, 140, 40);

        matchvs.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        matchvs.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.add(matchvs);
        matchvs.setBounds(340, 140, 370, 70);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PSL Background/new.jpg"))); // NOI18N
        jLabel2.setText("jLabel2");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(-10, 0, 1260, 1000);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1210, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 757, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        dispose();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ScoreCard s=null;
                new ScoreCard_SearchUpdate1().setVisible(true);
            }
        });
    }//GEN-LAST:event_backActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        boolean check=checkPlayeris_EXistOrNot(getPlayer,T.getMatchID());
        if(check==true){
                    
            try{
                String Query="Select runsScored,Innings,OutBy_playerid,OutType,runs_conceed,oversBolwed,No_wides,No_NoBalls from ScoreCard where Team_id=? and Match_id=? and Player_idone=?";
                PreparedStatement ps=Connection.prepareStatement(Query);
                ps.setString(1,getTeam);
                ps.setString(2,T.getMatchID());
                ps.setString(3,getPlayer);

                ResultSet rs=ps.executeQuery();
                if(rs!=null&&rs.next()){
                    ScoreCard s=new ScoreCard(getTeam,T.getMatchID(), getPlayer,rs.getInt(1),rs.getString(2),rs.getString(3),rs.getString(4),rs.getInt(5),rs.getFloat(6),rs.getInt(7),rs.getInt(8));
                    RunNextFrame(s);
                }
            }catch(Exception e){
                e.printStackTrace();
            }
        }else{
            JOptionPane.showMessageDialog(this,"Sorry Player isn't Exist in ScoreCard");
        }        
    }//GEN-LAST:event_searchActionPerformed

    private void playerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerActionPerformed
        getPlayer=GetIDplayer((String) player.getSelectedItem());
       
    }//GEN-LAST:event_playerActionPerformed

    private void TeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TeamActionPerformed
        getTeam=getIDTEAM((String) Team.getSelectedItem());
        LoadPlayerCombox(getTeam,player);
    }//GEN-LAST:event_TeamActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ScoreCard_SearchUpdate2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ScoreCard_SearchUpdate2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ScoreCard_SearchUpdate2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ScoreCard_SearchUpdate2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TeamMatch T=null;
                new ScoreCard_SearchUpdate2(T).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Team;
    private javax.swing.JButton back;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel matchvs;
    private javax.swing.JComboBox<String> player;
    private javax.swing.JButton search;
    private javax.swing.JLabel season;
    // End of variables declaration//GEN-END:variables
    

    void RunNextFrame(ScoreCard scorecard){
        dispose();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ScoreCard_Update(scorecard).setVisible(true);
            }
        });
    }
    void LoadTeamCombox(String s1,String s2){
        Team.addItem("-Select-");
        Team.addItem(s1);
        Team.addItem(s2);
    }
    String checkTeam(String id){
        String Name="";
        try{
            String Query="select Name from Team where TeamId=?";
            PreparedStatement ps=Connection.prepareStatement(Query);
            ps.setString(1, id);
            ResultSet rs=ps.executeQuery();
            if(rs!=null&&rs.next()){
                Name=rs.getString("Name");
            }
        }catch(Exception e){
            e.printStackTrace();
        }
        return Name;
    }
    String getSeason(String id){
        String Name="";
        try{
            String Query="Select seasonName from Season where seasonId=?";
            PreparedStatement ps=Connection.prepareStatement(Query);
            ps.setString(1,id);
            ResultSet rs=ps.executeQuery();
            if(rs!=null&&rs.next()){
                Name=rs.getString(1);
            }
        }catch(Exception e){
            e.printStackTrace();
        }
        return Name;
    }
    String getIDTEAM(String Name){
        String id="";
        try{
            String Query="select TeamId from Team where Name=?";
            PreparedStatement ps=Connection.prepareStatement(Query);
            ps.setString(1, Name);
            ResultSet rs=ps.executeQuery();
            if(rs!=null&&rs.next()){
                id=rs.getString("TeamId");
            }
        }catch(Exception e){
            e.printStackTrace();
        }
        return id;
    }
    void LoadPlayerCombox(String id,JComboBox c){
        try{
            String Query="select p.Name from player p join BidSold b on b.Player_Id=p.Playerid join Team T on t.TeamId=b.Team_Id where t.TeamId=?";
            PreparedStatement ps=Connection.prepareStatement(Query);
            ps.setString(1,id);
            ResultSet rs=ps.executeQuery();
            while(rs!=null&&rs.next()){
                c.addItem(rs.getString("Name"));;
            }
        }catch(Exception e){
            e.printStackTrace();
        }
    }
    String GetIDplayer(String Name){
        String id="";
        try{
            String Query="select Playerid from player where Name=?";
            PreparedStatement ps=Connection.prepareStatement(Query);
            ps.setString(1,Name);
            ResultSet rs=ps.executeQuery();
            if(rs!=null&&rs.next()){
                id=rs.getString("PlayerId");
            }
        }catch(Exception e){
            e.printStackTrace();
        }
        return id;
    }
    boolean checkPlayeris_EXistOrNot(String Playerid,String MatchID){
        boolean flag=false;
        try{
            String Query="Select * from ScoreCard where Player_idone=? and Match_id=?";
            PreparedStatement ps=Connection.prepareStatement(Query);
            ps.setString(1,Playerid);
            ps.setString(2,MatchID);
            ResultSet rs=ps.executeQuery();
            if(rs!=null&&rs.next()){
                flag=true;
            }
        }catch(Exception e){
            e.printStackTrace();
        }
        return flag;
    }
}
